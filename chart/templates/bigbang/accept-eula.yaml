{{- if .Values.nexus.repository.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
  creationTimestamp: null
  name: accept-eula
spec:
  template:
    metadata:
      creationTimestamp: null
    spec:
      activeDeadlineSeconds: 90
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8}}
      {{- end }}
      {{- if .Values.nexus.securityContext }}
      securityContext:
        {{ toYaml .Values.nexus.securityContext | nindent 8 }}
      {{- end }}
      containers:
      - image: "{{ .Values.job_image.repository }}:{{ .Values.job_image.tag }}"
        imagePullPolicy: {{ .Values.job_image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.nexus.containerSecurityContext | nindent 10 }}
        name: accept-eula
        command:
          - sh
        args:
          - -c
          - |
            set -e  # Exit immediately if a command exits with a non-zero status
            
            BASE_URL="http://{{ include "nexus.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.nexus.nexusPort }}"
            
            # Wait for Nexus service to be ready
            echo "Waiting for Nexus service at $BASE_URL to be ready..."
            for i in $(seq 1 30); do
              if curl -s -f -m 5 "${BASE_URL}/" > /dev/null; then
                echo "Nexus service is ready."
                break
              fi
              echo "Nexus not ready yet, sleeping... (attempt $i/30)"
              sleep 10
              if [ $i -eq 30 ]; then
                echo "Timed out waiting for Nexus service to be ready"
                exit 1
              fi
            done
            
            # Additional wait to ensure Nexus API is fully initialized
            echo "Waiting for Nexus API to be fully initialized..."
            sleep 15
            echo "Proceeding with EULA acceptance..."
            
            echo "[+] Accepting EULA using REST API at $BASE_URL"
            
            # Get current EULA status
            echo "[+] Getting current EULA status"
            EULA_RESPONSE=$(curl -s --fail --retry-delay 5 --retry-max-time 60 --retry 10 --retry-connrefused -X GET -u admin:"$API_CREDENTIALS" \
              "${BASE_URL}/service/rest/v1/system/eula")
              
            if [ $? -ne 0 ]; then
              echo "[!] Failed to get EULA status"
              exit 1
            fi
            
            echo "[+] Current EULA response: $EULA_RESPONSE"
            
            # Check if EULA is already accepted
            if echo "$EULA_RESPONSE" | grep -q '"accepted" *: *true'; then
              echo "[+] EULA already accepted - skipping update"
            else
              # Update EULA to accepted
              echo "[+] Setting EULA as accepted"
              UPDATED_EULA=$(echo "$EULA_RESPONSE" | sed 's/"accepted" *: *false/"accepted": true/g')
              echo "[+] Updated EULA data: $UPDATED_EULA"
              
              # Post updated EULA
              curl -s --fail --retry-delay 5 --retry-max-time 60 --retry 10 --retry-connrefused -X POST \
                -u admin:"$API_CREDENTIALS" \
                "${BASE_URL}/service/rest/v1/system/eula" \
                -H "Content-Type: application/json" \
                -d "$UPDATED_EULA"
                
              if [ $? -ne 0 ]; then
                echo "[!] Failed to accept EULA"
                exit 1
              fi
              
              echo "[+] Successfully accepted EULA"
            fi
            
            exit 0
        
        env:
        - name: API_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ template "nexus.name" . }}-secret
              key: admin.password
        resources: {}
      restartPolicy: Never
status: {}
{{- end }}