{{- if .Values.nexus.repository.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
  creationTimestamp: null
  name: realms
spec:
  template:
    metadata:
      creationTimestamp: null
    spec:
      activeDeadlineSeconds: 90
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8}}
      {{- end }}
      {{- if .Values.nexus.securityContext }}
      securityContext:
        {{ toYaml .Values.nexus.securityContext | nindent 8 }}
      {{- end }}
      containers:
      - image: "{{ .Values.job_image.repository }}:{{ .Values.job_image.tag }}"
        imagePullPolicy: {{ .Values.job_image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.nexus.containerSecurityContext | nindent 10 }}
        name: realms
        command:
          - sh
        args:
          - -c
          - |
            set -e # Exit immediately if a command exits with a non-zero status

            BASE_URL="http://{{ include "nexus.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.nexus.nexusPort }}"

            # Wait for Nexus service to be ready
            echo "Waiting for Nexus service at $BASE_URL to be ready..."
            for i in $(seq 1 30); do
              # Use curl -s -f to check readiness silently and fail on error codes >= 400
              if curl -s -f -m 5 "${BASE_URL}/"; then
                echo "Nexus service is ready."
                break
              fi
              echo "Nexus not ready yet, sleeping... (attempt $i/30)"
              sleep 10
              if [ $i -eq 30 ]; then
                echo "Timed out waiting for Nexus service to be ready"
                exit 1
              fi
            done

            echo "[+] Configuring realms using REST API at $BASE_URL"
            # realm configuration
            # First check if the realms are already configured correctly
            echo "[+] Checking current realm configuration"
            CURRENT_REALMS=$(curl -s -u admin:"$API_CREDENTIALS" \
                  "$BASE_URL/service/rest/v1/security/realms/active" \
                  -H "accept: application/json")
            
            # Normalize both JSON strings for comparison (remove whitespace)
            CURRENT_NORMALIZED=$(echo $CURRENT_REALMS | tr -d '[:space:]')
            TARGET_NORMALIZED=$(echo $REALMS | tr -d '[:space:]')
            
            if [ "$CURRENT_NORMALIZED" = "$TARGET_NORMALIZED" ]; then
              echo "[+] Realms already correctly configured - skipping update"
            else
              echo "[+] Updating realm configuration"
              # Use --fail to make curl exit with non-zero status on server errors (>=400)
              curl -v --fail --retry-delay 5 --retry-max-time 60 --retry 10 --retry-connrefused -X PUT \
                   -u admin:"$API_CREDENTIALS" \
                   "$BASE_URL/service/rest/v1/security/realms/active" \
                   -H "accept: application/json" \
                   -H "Content-Type: application/json" \
                   -d "$REALMS"
                   
              if [ $? -ne 0 ]; then
                echo "[!] Failed to configure realms"
                exit 1
              fi
              
              echo "[+] Successfully updated realm configuration"
            fi
            
            exit 0

        env:
        - name: API_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ template "nexus.name" . }}-secret
              key: admin.password
        - name: REALMS
          valueFrom:
            configMapKeyRef:
              name: {{ template "nexus.name" . }}-realms
              key: realms
        resources: {}
      restartPolicy: Never
status: {}
{{- end }}